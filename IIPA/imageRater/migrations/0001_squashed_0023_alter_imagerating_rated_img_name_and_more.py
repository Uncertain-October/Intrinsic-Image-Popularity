# Generated by Django 5.0 on 2024-01-02 05:29

import logging
from django.conf import settings
from django.contrib.auth.models import User
from django.db import migrations
from django.db import migrations, models
from django.db.backends.postgresql.schema import DatabaseSchemaEditor
from django.db.migrations.state import StateApps
from google.cloud import secretmanager
from google.oauth2 import service_account
import django.db.migrations.operations.special
import django.utils.timezone
import json
import os
import uuid

logger = logging.getLogger(__file__)


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# imageRater.migrations.0011_createsuperuser
# imageRater.migrations.0013_auto_20231108_1824
# imageRater.migrations.0018_auto_20231120_0059
# imageRater.migrations.0020_auto_20231120_0146


def gen_uuid(apps, schema_editor):
    MyModel = apps.get_model("imageRater", "ImageRating")
    for row in MyModel.objects.all():
        row.uuid = uuid.uuid4()
        row.save(update_fields=["uuid"])


def convert_to_rating_obj(apps, schema_editor):
    ImageRating = apps.get_model("imageRater", "imagerating")
    for row in ImageRating.objects.all():
        row.rating_obj = row.rating
        row.save(update_fields=["rating_obj"])


def gen_names(apps, schema_editor):
    ImageRating = apps.get_model("imageRater", "imagerating")
    for row in ImageRating.objects.all():
        for x in row.rating:
            if x != None:
                logger.debug(f"name: {x}")
                row.rated_img_name = x
                row.url = x
            else:
                row.rated_img_name = "default"
                row.url = "https://www.google.com"
        row.save()


def gen_ratings(apps, schema_editor):
    ImageRating = apps.get_model("imageRater", "imagerating")
    for row in ImageRating.objects.all():
        for x in row.rating:
            row.rated_value = row.rating.get(x)
        row.save(update_fields=["rated_value"])


def createsuperuser(apps: StateApps, schema_editor: DatabaseSchemaEditor) -> None:
    """
    Dynamically create an admin user as part of a migration
    Password is pulled from Secret Manger (previously created as part of tutorial)
    """
    if os.getenv("LOCAL_DEV", None):
        # We are in CI, so just create a placeholder user for unit testing.
        admin_password = "test"
    else:
        with open(os.path.join(os.getcwd(), "credential.json"), "r") as neep:
            data = json.load(neep)
            neep.close()

        GS_CREDENTIALS = service_account.Credentials.from_service_account_info(
            data,
            scopes=["https://www.googleapis.com/auth/cloud-platform"],
        )

        # # _, os.environ["GOOGLE_CLOUD_PROJECT"] = google.auth.default()  # type: ignore
        # # Pull secrets from Secret Manager
        # project_id = "iipa-32fdd" # env("GOOGLE_CLOUD_PROJECT")
        client = secretmanager.SecretManagerServiceClient(credentials=GS_CREDENTIALS)

        # Retrieve the previously stored admin password
        PASSWORD_NAME = os.environ.get("PASSWORD_NAME", "superuser_password")
        name = f"projects/iipa-32fdd/secrets/{PASSWORD_NAME}/versions/latest"
        admin_password = client.access_secret_version(name=name).payload.data.decode(
            "UTF-8"
        )
    users = User.objects.all()
    for user in users:
        print(f"user is {user}")

    # Create a new user using acquired password, stripping any accidentally stored newline characters
    User.objects.create_superuser(
        "superuser", "jazwickler@gmail.com", password=admin_password.strip()
    )


class Migration(migrations.Migration):
    replaces = [
        ("imageRater", "0001_initial"),
        ("imageRater", "0002_alter_imagerating_image"),
        ("imageRater", "0003_imagerating_rating"),
        ("imageRater", "0004_alter_imagerating_rating"),
        ("imageRater", "0005_alter_imagerating_rating"),
        ("imageRater", "0006_alter_imagerating_rating"),
        ("imageRater", "0007_alter_imagerating_rating"),
        ("imageRater", "0008_alter_imagerating_rating"),
        ("imageRater", "0009_alter_imagerating_rating"),
        ("imageRater", "0010_alter_imagerating_rating"),
        ("imageRater", "0011_createsuperuser"),
        ("imageRater", "0012_imagerating_uuid"),
        ("imageRater", "0013_auto_20231108_1824"),
        ("imageRater", "0014_auto_20231108_1824"),
        ("imageRater", "0015_remove_imagerating_id_alter_imagerating_uuid"),
        ("imageRater", "0016_imagerating_created_at_imagerating_updated_at_and_more"),
        ("imageRater", "0017_auto_20231120_0056"),
        ("imageRater", "0018_auto_20231120_0059"),
        ("imageRater", "0019_auto_20231120_0146"),
        ("imageRater", "0020_auto_20231120_0146"),
        ("imageRater", "0021_remove_imagerating_rating"),
        ("imageRater", "0022_alter_imagerating_rated_img_name_and_more"),
        ("imageRater", "0023_alter_imagerating_rated_img_name_and_more"),
    ]

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ImageRating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="uploads/")),
                ("rating", models.JSONField(default=dict)),
            ],
        ),
        migrations.RunPython(
            code=createsuperuser  
        ),
        migrations.AddField(
            model_name="imagerating",
            name="uuid",
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        migrations.RunPython(
            code=gen_uuid,  
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="imagerating",
            name="id",
        ),
        migrations.AlterField(
            model_name="imagerating",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4, primary_key=True, serialize=False, unique=True
            ),
        ),
        migrations.AddField(
            model_name="imagerating",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="imagerating",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name="imagerating",
            name="image",
            field=models.ImageField(upload_to=""),
        ),
        migrations.AddField(
            model_name="imagerating",
            name="rating_obj",
            field=models.JSONField(default=dict),
        ),
        migrations.RunPython(
            code=convert_to_rating_obj,  
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="imagerating",
            name="rated_img_name",
            field=models.CharField(default=str),
        ),
        migrations.AddField(
            model_name="imagerating",
            name="rated_value",
            field=models.FloatField(default=float),
        ),
        migrations.AddField(
            model_name="imagerating",
            name="url",
            field=models.URLField(default=str),
        ),
        migrations.RunPython(
            code=gen_names,  
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=gen_ratings, 
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="imagerating",
            name="rating",
        ),
        migrations.AlterField(
            model_name="imagerating",
            name="rated_img_name",
            field=models.CharField(default=str),
        ),
        migrations.AlterField(
            model_name="imagerating",
            name="rated_value",
            field=models.FloatField(default=float),
        ),
        migrations.AlterField(
            model_name="imagerating",
            name="url",
            field=models.URLField(default=str),
        ),
    ]  # type:ignore
