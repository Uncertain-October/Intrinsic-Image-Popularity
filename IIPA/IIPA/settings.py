"""
Django settings for IIPA project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import io
import json
import logging
import os
import sys
from pathlib import Path
from urllib.parse import urlparse

import botocore
import botocore.session
import environ
import google.auth
from aws_secretsmanager_caching import SecretCache, SecretCacheConfig
from botocore.config import Config
from google.cloud import secretmanager
from google.oauth2 import service_account

LOGGER = logging.getLogger(__file__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

CONFIG = Config(
    region_name="us-east-2",
)

print(
    f"\n\n\n\n config \n\n\n\n{os.environ.get('AWS_SECRET_KEY','Not Found')}\n\n\n\n\n\n\n"
) if os.environ.get("DEBUG") == "True" else False


# SECURITY WARNING: don't run with debug turned on in production!
# Change this to "False" when you are ready for production
ENV = environ.Env(
    CLOUDRUN_SERVICE_URL=(str, ""),
    DEBUG=(bool, True if os.environ.get("DEBUG") == "True" else False),
    GCP_DEV=(bool, True if os.environ.get("GCP_DEV") == "True" else False),
    GS_BUCKET_NAME=(str, "local"),
    LOCAL_DEV=(bool, False),
    SECRET_KEY=(str, ""),
    SERVICE_ACCOUNT_KEY=(str, " "),
    GS_CREDENTIALS=(service_account.Credentials, None),
    GOOGLE_CLOUD_PROJECT=(str, " "),
    SERVICE_URL_TAGS=(str, os.environ.get("SERVICE_URL_TAGS")),
    AWS_ACCESS_KEY=(str, os.environ.get("AWS_ACCESS_KEY")),
    AWS_SECRET_KEY=(str, os.environ.get("AWS_SECRET_KEY")),
)

ENV_FILE = os.path.join(BASE_DIR, ".env")
LOGGER.debug("ENV:", ENV_FILE)
print("ENV:", ENV_FILE)


DEBUG = True #ENV("DEBUG")
LOCAL_DEV = ENV("LOCAL_DEV")
SERVICE_ACCOUNT_KEY = ENV("SERVICE_ACCOUNT_KEY")
SECRET_KEY = ENV("SECRET_KEY")
GCP_DEV = ENV("GCP_DEV")
GS_CREDENTIALS = ENV("GS_CREDENTIALS")
GOOGLE_CLOUD_PROJECT = ENV("GOOGLE_CLOUD_PROJECT")
AWS_ACCESS_KEY = os.environ.get("AWS_ACCESS_KEY")
AWS_SECRET_KEY = os.environ.get("AWS_SECRET_KEY")

SERVICE_URL_TAGS = (
    os.environ.get("SERVICE_URL_TAGS", "").split(";")
    if os.environ.get("SERVICE_URL_TAGS") is not None
    else None
)

LOGGER.debug("GCP MODE: {}", GCP_DEV)
print(f"GCP MODE: {GCP_DEV}") if os.environ.get("DEBUG") == "True" else False

print(os.environ.keys()) if os.environ.get("DEBUG") == "True" else False
LOGGER.debug(os.environ.keys())

LOGGER.debug("SERVICE_URL_TAGS: {}", SERVICE_URL_TAGS)
print(f"SERVICE_URL_TAGS: {SERVICE_URL_TAGS}") if os.environ.get(
    "DEBUG"
) == "True" else False

with open("../unformatted_cred.json", "r") as fileObj:
    keyHeader = "-----BEGIN PRIVATE KEY-----"
    keyFooter = "-----END PRIVATE KEY-----"
    fileData = fileObj.read()

    keyHeaderIndex = fileData.index("-----BEGIN PRIVATE KEY-----")
    keyFooterIndex = fileData.index("-----END PRIVATE KEY-----")

    LOGGER.debug(
        fileData[keyHeaderIndex : keyHeaderIndex + len(keyHeader)],
        fileData[keyFooterIndex : keyFooterIndex + len(keyFooter)],
        keyHeaderIndex,
        keyFooterIndex,
    )

    a1 = fileData[:keyHeaderIndex]
    a2 = fileData[keyFooterIndex + len(keyFooter) + 1 :]

    key = fileData[keyHeaderIndex + len(keyHeader) + 1 : keyFooterIndex]

    key = key.replace("\n", " ").replace(" ", "\\n")

    fileData = a1 + keyHeader + "\\n" + key + keyFooter + "\\n" + a2

    LOGGER.debug(fileData)

    data = json.loads(fileData)
    fileObj.close()

LOGGER.debug(SERVICE_ACCOUNT_KEY)
KEY_HEADER_INDEX = data  # json.loads(SERVICE_ACCOUNT_KEY.replace("\n", ""))
LOGGER.debug("Write", KEY_HEADER_INDEX)
with open(os.path.join(os.getcwd(), "credential.json"), "w") as neep:
    json.dump(KEY_HEADER_INDEX, neep)
    neep.close()

print(f'path: {os.path.join(os.getcwd(), "credential.json")}') if os.environ.get(
    "DEBUG"
) == "True" else False

with open(os.path.join(os.getcwd(), "credential.json"), "r") as neep:
    data = json.load(neep)
    neep.close()

LOGGER.debug(data)
print(f"crede: {data}") if os.environ.get("DEBUG") == "True" else False

GS_CREDENTIALS = service_account.Credentials.from_service_account_info(
    data,
    scopes=[
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/devstorage.full_control",
        "https://www.googleapis.com/auth/devstorage.read_only",
        "https://www.googleapis.com/auth/devstorage.read_write",
    ],
)

LOGGER.debug(f"credsss: {GS_CREDENTIALS}")
LOGGER.debug(os.environ)
print(os.environ) if os.environ.get("DEBUG") == "True" else False

# Attempt to load the Project ID into the environment, safely failing on error.
try:
    if GCP_DEV:
        LOGGER.debug("start in GCP ENV MODE")
        print("start in GCP ENV MODE")
        _, os.environ["GOOGLE_CLOUD_PROJECT"] = google.auth.default(  # type: ignore
            scopes=[
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/devstorage.full_control",
                "https://www.googleapis.com/auth/devstorage.read_only",
                "https://www.googleapis.com/auth/devstorage.read_write",
            ]
        )  # type: ignore
        # Pull secrets from Secret Manager
        project_id = ENV("GOOGLE_CLOUD_PROJECT")
        client = secretmanager.SecretManagerServiceClient()
        settings_name = os.environ.get("SETTINGS_NAME", "django_settings")
        name = f"projects/{project_id}/secrets/{settings_name}/versions/latest"
        payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")
        print(settings_name + " " + project_id + " " + payload + " ") if ENV(
            "DEBUG"
        ) is True else False
        print("here")
        ENV.read_env(io.StringIO(payload))
        ENV.read_env(ENV_FILE, overwrite=True) if LOCAL_DEV else None
        print(ENV.__str__())
    elif os.path.isfile(ENV_FILE):
        LOGGER.debug("start in OTHER ENV MODE")
        ENV.read_env(ENV_FILE, overwrite=True)

        if DEBUG and LOCAL_DEV and not GCP_DEV:
            LOGGER.debug("In DEBUG and LOCAL MODE")
        elif DEBUG:
            LOGGER.debug("In DEBUG MODE")

    else:
        LOGGER.debug("I AM HERE else")
        raise Exception(
            "No local .env or GOOGLE_CLOUD_PROJECT detected. No secrets found."
        )
except google.auth.exceptions.DefaultCredentialsError:  # type: ignore
    LOGGER.debug("I AM HERE except")
    LOGGER.debug(sys.exc_info())
    pass

SECRET_KEY = ENV("SECRET_KEY")

print(ENV("AWS_ACCESS_KEY")) if ENV("DEBUG") == True else False

CLIENT = botocore.session.get_session().create_client(
    "secretsmanager",
    config=CONFIG,
    region_name="us-east-2",
    aws_access_key_id=ENV("AWS_ACCESS_KEY"),
    aws_secret_access_key=ENV("AWS_SECRET_KEY"),
)  # type: ignore
CACHE_CONFIG = SecretCacheConfig()
CACHE = SecretCache(config=CACHE_CONFIG, client=CLIENT)

DBSECRET = json.loads(
    CACHE.get_secret_string("rds!db-5216300f-7c34-431e-ba9d-0319b2e4d113")
)


LOGGER.debug("\n\n\n secret \n\n\n\n{}\n\n\n\n\n\n\n", DBSECRET)
print(
    f"\n\n\n secret \n\n\n\n{DBSECRET.get('password')}\n\n\n\n\n\n\n"
) if os.environ.get("DEBUG") == "True" else False


EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "[{pathname}] [line: {lineno}] [pid: {process}] [thread: {thread}] [{levelname}]: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


ADMINS = [("jaked", "jazwickler@gmail.com")]

# Application definition

INSTALLED_APPS = [
    "debug_toolbar",
    "imageRater.apps.ImageraterConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_bootstrap5",
]


# SECURITY WARNING: It's recommended that you use this when
# running in production. The URL will be known once you first deploy
# to Cloud Run. This code takes the URL and converts it to both these settings formats.

CLOUDRUN_SERVICE_URL = ENV("CLOUDRUN_SERVICE_URL").split(",") if ENV("CLOUDRUN_SERVICE_URL") != "" else ""  # type: ignore
LOGGER.info(f"Cloud run url: {CLOUDRUN_SERVICE_URL}")
CSRF_COOKIE_SECURE = False
if CLOUDRUN_SERVICE_URL != "":
    CSRF_COOKIE_SECURE = True
    ALLOWED_HOSTS = []
    CSRF_TRUSTED_ORIGINS = [
        "https://iipa-32fdd.web.app",
        "https://pic-pop-predict.web.app/",
    ]
    CSRF_COOKIE_SAMESITE = "None"
    if SERVICE_URL_TAGS is not None:
        for tag in SERVICE_URL_TAGS:
            for url in CLOUDRUN_SERVICE_URL:
                if len(url) > 0:
                    url = url.replace("https://", f"https://{tag}---")
                    ALLOWED_HOSTS.append(urlparse(url).netloc)
                    CSRF_TRUSTED_ORIGINS.append(url)
    else:
        for url in CLOUDRUN_SERVICE_URL:
            ALLOWED_HOSTS.append(urlparse(url).netloc)
            CSRF_TRUSTED_ORIGINS.append(url)
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
else:
    CSRF_COOKIE_SAMESITE = "Lax"
    ALLOWED_HOSTS = ["*"]

print(f"\n\n\nALLOWED: {ALLOWED_HOSTS}\n\n\n") if os.environ.get(
    "DEBUG"
) == "True" else False
LOGGER.info("\n\n\nALLOWED: {ALLOWED_HOSTS}\n\n\n")
print(f"\n\n\nCSRF_ONLY: {CSRF_COOKIE_SECURE}\n\n\n") if os.environ.get(
    "DEBUG"
) == "True" else False
LOGGER.info(f"\n\n\nCSRF_ONLY:{CSRF_COOKIE_SECURE} \n\n\n")


MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "IIPA.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.static",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
                "django.template.context_processors.csrf",
            ],
        },
    },
]


WSGI_APPLICATION = "IIPA.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

LOGGER.debug(DBSECRET.get("password")) if os.environ.get("DEBUG") == "True" else False

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": "iipa.cj0jeurehhtj.us-east-2.rds.amazonaws.com",
        "USER": "postgres",
        "PASSWORD": DBSECRET.get("password"),
        "NAME": "iipa",
        "PORT": "5432",
        "SSL": {"sslrootcert": "/.aws/us-east-2-bundle.pem", "sslmode": "verify-ca"},
    }
}

SERVER_EMAIL = "jazwickler@gmail.com"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_TZ = True

INTERNAL_IPS = ["127.0.0.1"]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


# Define static storage via django-storages[google]
GS_BUCKET_NAME = ENV("GS_BUCKET_NAME")
print(f"storage: {GS_BUCKET_NAME}, cred: {GS_CREDENTIALS}") if os.environ.get(
    "DEBUG"
) == "True" else False
if GS_BUCKET_NAME == "local":
    STATIC_URL = "static/"
    STATIC_ROOT = "static/"
elif GS_BUCKET_NAME == "iipa-static":
    STATIC_URL = "static/"
    project_id = ENV("GOOGLE_CLOUD_PROJECT")
    STATICFILES_DIRS = [BASE_DIR / "imageRater/static/imageRater", BASE_DIR / "static"]
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
            "OPTIONS": {
                "bucket_name": "iipa-uploads",
                "project_id": project_id,
                "default_acl": None,
                "querystring_auth": False,
                "location": "uploads/",
                "credentials": GS_CREDENTIALS,
            },
        },
        "staticfiles": {
            "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
            "OPTIONS": {
                "bucket_name": GS_BUCKET_NAME,
                "project_id": project_id,
                "default_acl": None,
                "querystring_auth": False,
                "location": "static/",
                "credentials": GS_CREDENTIALS,
            },
        },
    }
else:
    LOGGER.debug(sys.exc_info())
    raise Exception(
        "No local .env or GS_BUCKET_NAME detected. No storage option found."
    )


MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
